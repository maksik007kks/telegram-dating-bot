import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    age INTEGER,
    gender TEXT,
    bio TEXT,
    photo TEXT,
    state TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS likes (
    liker_id INTEGER,
    liked_id INTEGER,
    PRIMARY KEY (liker_id, liked_id)
)
''')

conn.commit()

GENDERS = ['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞']

# === –ö–û–ú–ê–ù–î–´ ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("INSERT OR REPLACE INTO users (user_id, state) VALUES (?, ?)", (user_id, 'name'))
    conn.commit()
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text("/start ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n/match ‚Äî –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n/profile ‚Äî –º–æ—è –∞–Ω–∫–µ—Ç–∞\n/stop ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")

def stop(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    update.message.reply_text("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

def profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT name, age, gender, bio FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start")
        return
    name, age, gender, bio = row
    update.message.reply_text(f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–û —Å–µ–±–µ: {bio}")

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    cursor.execute("SELECT state FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        update.message.reply_text("–ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    state = row[0]

    if state == 'name':
        cursor.execute("UPDATE users SET name = ?, state = 'age' WHERE user_id = ?", (text, user_id))
        update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    elif state == 'age':
        if not text.isdigit():
            update.message.reply_text("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
            return
        cursor.execute("UPDATE users SET age = ?, state = 'gender' WHERE user_id = ?", (int(text), user_id))
        update.message.reply_text(
            "–ö—Ç–æ —Ç—ã –ø–æ –ø–æ–ª—É?",
            reply_markup=ReplyKeyboardMarkup([[g] for g in GENDERS], one_time_keyboard=True, resize_keyboard=True)
        )

    elif state == 'gender':
        if text not in GENDERS:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
            return
        cursor.execute("UPDATE users SET gender = ?, state = 'bio' WHERE user_id = ?", (text, user_id))
        update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:", reply_markup=ReplyKeyboardRemove())

    elif state == 'bio':
        cursor.execute("UPDATE users SET bio = ?, state = 'photo' WHERE user_id = ?", (text, user_id))
        update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")

    elif state == 'browse':
        if text.lower() == '–ª–∞–π–∫':
            handle_like(update, context)
        elif text.lower() == '–¥–∞–ª—å—à–µ':
            show_profile(update, context)
        else:
            update.message.reply_text("–ù–∞–∂–º–∏ '–õ–∞–π–∫' –∏–ª–∏ '–î–∞–ª—å—à–µ'.")

    conn.commit()

def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT state FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row or row[0] != 'photo':
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ç–æ.")
        return

    photo = update.message.photo[-1]
    file = photo.get_file()
    path = f"photos/{user_id}.jpg"
    os.makedirs("photos", exist_ok=True)
    file.download(path)

    cursor.execute("UPDATE users SET photo = ?, state = 'browse' WHERE user_id = ?", (path, user_id))
    conn.commit()
    update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ –ù–∞–ø–∏—à–∏ /match –¥–ª—è –ø–æ–∏—Å–∫–∞")

def show_profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor.execute("SELECT gender FROM users WHERE user_id = ?", (user_id,))
    my_gender = cursor.fetchone()[0]
    target_gender = '–î–µ–≤—É—à–∫–∞' if my_gender == '–ü–∞—Ä–µ–Ω—å' else '–ü–∞—Ä–µ–Ω—å'

    cursor.execute("SELECT liked_id FROM likes WHERE liker_id = ?", (user_id,))
    liked = [row[0] for row in cursor.fetchall()]

    cursor.execute("SELECT user_id, name, age, bio, photo FROM users WHERE gender = ? AND user_id != ?", (target_gender, user_id))
    for uid, name, age, bio, photo in cursor.fetchall():
        if uid in liked:
            continue
        context.user_data['current'] = uid
        caption = f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–û —Å–µ–±–µ: {bio}"
        if photo and os.path.exists(photo):
            update.message.reply_photo(photo=open(photo, 'rb'), caption=caption,
                                       reply_markup=ReplyKeyboardMarkup([["–õ–∞–π–∫", "–î–∞–ª—å—à–µ"]], resize_keyboard=True))
        else:
            update.message.reply_text(caption,
                                      reply_markup=ReplyKeyboardMarkup([["–õ–∞–π–∫", "–î–∞–ª—å—à–µ"]], resize_keyboard=True))
        return

    update.message.reply_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ü•≤")

def handle_like(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    target_id = context.user_data.get('current')
    if not target_id:
        update.message.reply_text("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã.")
        return

    cursor.execute("INSERT OR IGNORE INTO likes (liker_id, liked_id) VALUES (?, ?)", (user_id, target_id))
    cursor.execute("SELECT 1 FROM likes WHERE liker_id = ? AND liked_id = ?", (target_id, user_id))
    if cursor.fetchone():
        update.message.reply_text("\U0001F496 –≠—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ Telegram!")
    conn.commit()
    show_profile(update, context)

def run_bot():
    TOKEN = os.environ.get("TOKEN")
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # handlers ...
    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    updater.idle()  # –û–°–¢–ê–í–¨ –¢–ê–ö ‚Äî –Ω–æ –≤—ã–∑–æ–≤–∏ –∏–∑ __main__


